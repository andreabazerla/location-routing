model "Location Routing"
	uses "mmxprs", "mmive"

  	version 1.0.0

  	setparam("XPRS_VERBOSE", true)

  	forward procedure draw_locations
  	forward procedure draw_customers

  	declarations
    	locations_number: integer
    	customers_number: integer
    	points_number: integer
    	depots_capacity: integer
    end-declarations
    
    locations_number := 5
  	customers_number := 15
  	points_number := locations_number + customers_number
  	depots_capacity := 10

	declarations
		LOCATIONS_NUMBER = 1..locations_number
		LOCATION_X, LOCATION_Y : array(LOCATIONS_NUMBER) of integer
		LOCATIONS: array(LOCATIONS_NUMBER) of array(1..2) of integer

		CUSTOMERS_NUMBER = 1..customers_number
		CUSTOMER_X, CUSTOMER_Y, CUSTOMER_DEMAND : array(CUSTOMERS_NUMBER) of integer
		CUSTOMERS: array(CUSTOMERS_NUMBER) of array(1..3) of integer

		POINTS_NUMBER = 1..points_number
		
		build_depot : array(LOCATIONS_NUMBER) of mpvar
	end-declarations
	
	forall(i in LOCATIONS_NUMBER) build_depot(i) is_binary
	
	ROUTES_NUMBER = 1..locations_number
	ROUTES: array(ROUTES_NUMBER) of integer
	
	declarations
		ROUTES: array(ROUTES_NUMBER) of integer

		DISTANCE : array(POINTS_NUMBER, POINTS_NUMBER) of integer
		take_customer : array(POINTS_NUMBER, POINTS_NUMBER, ROUTES_NUMBER) of mpvar

		Cost : linctr
	end-declarations
	
	forall(i in POINTS_NUMBER, j in POINTS_NUMBER, k in VEHICLES) take_customer(i,j,k) is_binary

  	initializations from "data.dat"
		[LOCATION_X, LOCATION_Y] as 'LOCATIONS'
		[CUSTOMER_X, CUSTOMER_Y, CUSTOMER_DEMAND] as 'CUSTOMERS'
  	end-initializations
		
  	forall(i in LOCATIONS_NUMBER) do
		LOCATIONS(i,1) := LOCATION_X(i)
		LOCATIONS(i,2) := LOCATION_Y(i)
  	end-do
  	
  	forall(i in CUSTOMERS_NUMBER) do
		CUSTOMERS(i,1) := CUSTOMER_X(i)
		CUSTOMERS(i,2) := CUSTOMER_Y(i)
		CUSTOMERS(i,3) := CUSTOMER_DEMAND(i)
	end-do
		
	writeln(LOCATIONS)
	writeln(CUSTOMERS)

!VINCOLI DEL MODELLO---------------------------------------------------------------------

	sum(i in ROUTES + CUSTOMERS) sum(k in ROUTES)

  	!Cost := sum(i in LOCATION_NUMBER) (LOCATIONS(i) * build_depot(i)) + sum(i in POINTS_NUMBER, j in POINTS_NUMBER, kk in LOCATIONS_NUMBER) DISTANCE(i,j) * take_customer(i,j,kk)

  	!minimize(Cost)

  	!writeln("Cost: ", getobjval)

  	draw_locations
  	draw_customers

 !PROCEDURE-----------------------------------------------------------------------------

	procedure draw_locations
		IVEerase
		IVEzoom(min(i in LOCATIONS_NUMBER) LOCATION_X(i)-10, min(i in LOCATIONS_NUMBER) LOCATION_Y(i)-10,
				max(i in LOCATIONS_NUMBER) LOCATION_X(i)+10, max(i in LOCATIONS_NUMBER) LOCATION_Y(i)+10)
		locions_plot := IVEaddplot("Locations", IVE_RED)
		forall(i in LOCATIONS_NUMBER) IVEdrawpoint(locations_plot, LOCATION_X(i), LOCATION_Y(i));
	end-procedure

	procedure draw_customers
		IVEzoom(min(i in CUSTOMERS_NUMBER) CUSTOMER_X(i)-10, min(i in CUSTOMERS_NUMBER) CUSTOMER_Y(i)-10,
				max(i in CUSTOMERS_NUMBER) CUSTOMER_X(i)+10, max(i in CUSTOMERS_NUMBER) CUSTOMER_Y(i)+10)
		customers_plot := IVEaddplot("Customers", IVE_BLACK)
		forall(i in CUSTOMERS_NUMBER) IVEdrawpoint(customers_plot, CUSTOMER_X(i), CUSTOMER_Y(i));
	end-procedure

end-model
