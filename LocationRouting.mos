model "Location Routing"
	uses "mmxprs"!, "mmive"

  	version 1.0.0

  	setparam("XPRS_VERBOSE", true)

	!forward procedure draw_locations
  	!forward procedure draw_customers

  	declarations
    	locations_number: integer
    	customers_number: integer
    	points_number: integer
    	depots_capacity: integer
    end-declarations

    locations_number := 5
  	customers_number := 15
  	points_number := locations_number + customers_number
  	depots_capacity := 10

	declarations
		LOCATIONS_NUMBER = 1..locations_number
		LOCATION_X, LOCATION_Y, LOCATION_COST: array(LOCATIONS_NUMBER) of integer
		LOCATIONS: array(LOCATIONS_NUMBER) of array(1..3) of integer

		CUSTOMERS_NUMBER = 1..customers_number
		CUSTOMER_X, CUSTOMER_Y, CUSTOMER_DEMAND : array(CUSTOMERS_NUMBER) of integer
		CUSTOMERS: array(CUSTOMERS_NUMBER) of array(1..3) of integer

		POINTS_NUMBER = 1..points_number
		POINTS: array(POINTS_NUMBER) of array(1..3) of integer

		build_depot : array(LOCATIONS_NUMBER) of mpvar

		ROUTES_NUMBER = 1..locations_number

		DISTANCE : array(POINTS_NUMBER, POINTS_NUMBER) of real
		take_customer : array(POINTS_NUMBER, POINTS_NUMBER, ROUTES_NUMBER) of mpvar

		Cost : linctr
	end-declarations

	forall(i in LOCATIONS_NUMBER) build_depot(i) is_binary
	forall(i in POINTS_NUMBER, j in POINTS_NUMBER, k in ROUTES_NUMBER) take_customer(i,j,k) is_binary

  	initializations from "data.dat"
		[LOCATION_X, LOCATION_Y, LOCATION_COST] as 'LOCATIONS'
		[CUSTOMER_X, CUSTOMER_Y, CUSTOMER_DEMAND] as 'CUSTOMERS'
  	end-initializations

  	forall(i in LOCATIONS_NUMBER) do
		LOCATIONS(i,1) := LOCATION_X(i)
		LOCATIONS(i,2) := LOCATION_Y(i)
		LOCATIONS(i,3) := LOCATION_COST(i)
  	end-do

  	forall(i in CUSTOMERS_NUMBER) do
		CUSTOMERS(i,1) := CUSTOMER_X(i)
		CUSTOMERS(i,2) := CUSTOMER_Y(i)
		CUSTOMERS(i,3) := CUSTOMER_DEMAND(i)
	end-do

	contatore := 0
	forall(i in LOCATIONS_NUMBER) do
		POINTS(i,1) := LOCATION_X(i)
		POINTS(i,2) := LOCATION_Y(i)
		POINTS(i,3) := LOCATION_COST(i)
		contatore := i
	end-do

	forall(i in CUSTOMERS_NUMBER) do
		POINTS(contatore+i,1) := CUSTOMER_X(i)
		POINTS(contatore+i,2) := CUSTOMER_Y(i)
		POINTS(contatore+i,3) := CUSTOMER_DEMAND(i)
	end-do

	writeln(LOCATIONS)
	writeln(CUSTOMERS)
	writeln(POINTS)

	forall(i in POINTS_NUMBER) do
		forall(j in POINTS_NUMBER) do
			DISTANCE(i,j) := sqrt((POINTS(j,1)-POINTS(i,1))^2 + (POINTS(j,2)-POINTS(i,2))^2)
			write(strfmt(DISTANCE(i,j), 2, 2), "\t")
		end-do
		write("\n")
	end-do

!VINCOLI DEL MODELLO-----------------------------------------------------------

	! Ogni cliente appartiene ad una e una sola route
	forall(j in CUSTOMERS_NUMBER)
		sum(i in POINTS_NUMBER, k in ROUTES_NUMBER) take_customer(i,j,k) = 1

	! La domanda totale dei clienti di una route deve essere minore o uguale alla capacità del magazzino da cui parte
	forall(k in ROUTES_NUMBER)
		sum(i in POINTS_NUMBER, j in CUSTOMERS_NUMBER) CUSTOMER_DEMAND(j) * take_customer(i,j,k) <= depots_capacity * build_depot(k)

	! Ogni route inizia da un magazzino
	forall(i in ROUTES_NUMBER, k in ROUTES_NUMBER)
		sum(j in CUSTOMERS_NUMBER) take_customer(i,j,k) <= 1

	! Ogni nodo ha solo 2 archi incidenti
	forall(j in POINTS_NUMBER, k in ROUTES_NUMBER)
		sum(i in POINTS_NUMBER) take_customer(i,j,k) = 2

	! Un veicolo non può da un magazzino andare ad un altro magazzino
	forall(k in ROUTES_NUMBER)
		sum(i in LOCATIONS_NUMBER, j in LOCATIONS_NUMBER) take_customer(i,j,k) = 0

!FUNZIONE OBIETTIVO------------------------------------------------------------

  	Cost := sum(i in LOCATIONS_NUMBER) (LOCATION_COST(i) * build_depot(i)) + sum(i in POINTS_NUMBER, j in POINTS_NUMBER, k in ROUTES_NUMBER) DISTANCE(i,j) * take_customer(i,j,k)

	minimize(Cost)
	writeln("Cost = ", getobjval)

  	minimize(XPRS_LIN, Cost)
  	writeln("Cost = ", getobjval)

  	forall(i in ROUTES_NUMBER) do
		write(getsol(build_depot(i)))
		write(' ')
	end-do

	forall(i in POINTS_NUMBER, j in POINTS_NUMBER, k in LOCATIONS_NUMBER) do
		write(getsol(take_customer(i,j,k)))
		write(' ')
	end-do

  	!draw_locations
  	!draw_customers

!PROCEDURE--------------------------------------------------------------------

(!
	procedure draw_locations
		IVEerase
		IVEzoom(min(i in LOCATIONS_NUMBER) LOCATION_X(i)-10, min(i in LOCATIONS_NUMBER) LOCATION_Y(i)-10,
				max(i in LOCATIONS_NUMBER) LOCATION_X(i)+10, max(i in LOCATIONS_NUMBER) LOCATION_Y(i)+10)
		locations_plot := IVEaddplot("Locations", IVE_RED)
		forall(i in LOCATIONS_NUMBER) IVEdrawpoint(locations_plot, LOCATION_X(i), LOCATION_Y(i));
	end-procedure

	procedure draw_customers
		IVEzoom(min(i in CUSTOMERS_NUMBER) CUSTOMER_X(i)-10, min(i in CUSTOMERS_NUMBER) CUSTOMER_Y(i)-10,
				max(i in CUSTOMERS_NUMBER) CUSTOMER_X(i)+10, max(i in CUSTOMERS_NUMBER) CUSTOMER_Y(i)+10)
		customers_plot := IVEaddplot("Customers", IVE_BLACK)
		forall(i in CUSTOMERS_NUMBER) IVEdrawpoint(customers_plot, CUSTOMER_X(i), CUSTOMER_Y(i));
	end-procedure
!)

end-model
