(! Progetto: Location Routing #16
	Si consideri un problema di location capacitato, in cui sono dati n clienti
	N={1..n} ciascuno con domanda qi>0, e f luoghi possibili F={1..f} in cui
	costruire dei magazzini di capacità Q, occorre decidere dove costruire i
	magazzini noto gh il costo di costruzione del magazzino nella località h,
	quali clienti servire con ciascun magazzino sapendo che il costo di servizio è
	dato dal costo del ciclo hamiltoniano di costo minimo che visita il magazzino
	h e tutti i nodi associati ai clienti assegnati a quel magazzino. L'obiettivo
	è minimizzare la somma dei costi di costruzione e di servizio ai clienti.
!)

! Nome del modello
model "Location Routing"

	! Direttive per il compilatore
	uses "mmxprs", "mmsvg", "advmod"

	! Versione del modello
	version 2.2.0


	! Parametro di stampa messaggi dell'ottimizzatore
	setparam("XPRS_VERBOSE", false)

	! Dichiarazione funzioni del Cut Set
	forward function Connessi:integer
	forward procedure reset_nodi_visitati
	forward procedure visita(n:integer)

	! Dichiarazione funzioni di plotting
	forward procedure plot
	forward procedure draw_locations
	forward procedure draw_customers
	forward procedure draw_edges

	! Dichiarazione funzioni di debug
	forward procedure stampa_matrici(mag:boolean, cus_dep:boolean, edg:boolean)
	forward procedure debug_magazzini_clienti
	forward procedure debug_archi

	! Dichiarazioni degli identificatori
  	declarations
  		! Numero di locazioni dove poter costruire un magazzino
    	locations_number: integer

    	! Numero di clienti da essere serviti
    	customers_number: integer

    	! Somma del numero di locazioni moltiplicate per 2 e del numero di clienti
    	points_number: integer

    	! Capacità uguale per tutti i magazzini costruiti
    	depots_capacity: integer
    end-declarations

    ! Variabili per la stampa delle immagini svg
    svgcounter := 0
    svgtimestamp := timestamp
    saved := true ! Imposta a true per salvare le svg

    ! Variabili per il debug su file
    debug_su_file := false
    debug_file_name := "" + svgtimestamp + "_debug.txt"

	! VARIABILI MODIFICABILI -----------------------------------------------------

	! Numero di locazioni e clienti
    locations_number := 8
  	customers_number := 12

  	! Capacità dei magazzini costruiti
  	depots_capacity := 15

  	! Domanda massima dei clienti
  	customer_max_demand := 15

  	! Costo massimo della costruzione dei magazzini
  	depot_max_cost := 100 ! numero alto predilige cicli lunghi, numero basso predilige apertura di più magazzini vicini ai clienti

  	! Limite massimo del piano cartesiano dove posizionare magazzini e clienti
  	point_max_range := 100

  	! seed
    myseed := integer(round((100*random)+0.5)) ! questo genera seed randomici per fare diverse prove sugli stessi dati.
    myseed := 55	! salvo il seed 59 perché è particolarmente buono

  	! Abilita/Disabilita vincolo Cliente-Route V1
  	clienteroutev1 := true

	! Abilita/Disabilita vincolo Cliente-Route V2 - Attenzione a dimensione problema
  	clienteroutev2 := false

  	! Abilita/Disabilita raffinamento per coppie di clienti
  	raffinamento_coppie := true

	! ----------------------------------------------------------------------------

	! Definizione di tutti i punti sul grafo
  	points_number := locations_number*2 + customers_number

	! ARRAYS ---------------------------------------------------------------------
	! Array delle locazioni di start
    LOCATIONS_START_NUMBER:= 1..locations_number

    ! Array delle locazioni di end
    LOCATIONS_END_NUMBER:= locations_number+1..locations_number*2

    ! Array delle locazioni di start e di end
    LOCATIONS_START_END_NUMBER:= 1..locations_number*2

    ! Array dei clienti
    CUSTOMERS_NUMBER := locations_number*2+1..points_number

    ! Array di tutti i punti comprensivi dei magazzini di start, di end e dei clienti
    POINTS_NUMBER:= 1..points_number
    ! ----------------------------------------------------------------------------

    declarations
    	! Array di array delle locazioni di start che conterranno ascissa, ordinata e costo di costruzione
		LOCATIONS: array(LOCATIONS_START_NUMBER) of array(1..3) of integer
		LOCATIONS_START: array(LOCATIONS_START_NUMBER) of array(1..3) of integer

		! Array di array delle locazioni di end che conterranno ascissa, ordinata e costo di costruzione
		LOCATIONS_END: array(LOCATIONS_END_NUMBER) of array(1..3) of integer

		! Array di array delle locazioni di start e di end che conterranno ascissa, ordinata e costo di costruzione
		LOCATIONS_START_END: array(LOCATIONS_START_END_NUMBER) of array(1..3) of integer

		! Array di array dei clienti comprensivi di ascissa, ordinata e domanda
		CUSTOMERS: array(CUSTOMERS_NUMBER) of array(1..3) of integer

		! Array dei punti totali comprensivi delle locazioni e dei clienti
		POINTS: array(POINTS_NUMBER) of array(1..3) of integer

		! Array delle distanze tra un punto e l'altro
		DISTANCES: array(POINTS_NUMBER, POINTS_NUMBER) of real

		! Array di nodi visitati
		nodi_visitati: array(POINTS_NUMBER) of integer

		! Array variabili decisionali sulla costruzione dei magazzini
		build_depot: array(LOCATIONS_START_END_NUMBER) of mpvar

		! Array variabili decisionali dell'esistenza degli archi sul grafo
		edge_exists: array(POINTS_NUMBER, POINTS_NUMBER) of mpvar

		! Array variabili decisionali per l'associazione cliente-magazzino
		customer_depot: array(CUSTOMERS_NUMBER, LOCATIONS_START_END_NUMBER) of mpvar

		! Array di variabili ausiliarie per vincolo Clienti-Route v2
		x: array(CUSTOMERS_NUMBER, CUSTOMERS_NUMBER, LOCATIONS_START_NUMBER) of mpvar

		! Funzione obbiettivo
		Objective: linctr
  	end-declarations

	! Definizione variabili decisionali binarie
  	forall (i in LOCATIONS_START_END_NUMBER) build_depot(i) is_binary
	forall (i in POINTS_NUMBER, j in POINTS_NUMBER) edge_exists(i,j) is_binary
	forall (i in CUSTOMERS_NUMBER, j in LOCATIONS_START_END_NUMBER) customer_depot(i,j) is_binary
	forall (i in CUSTOMERS_NUMBER, j in CUSTOMERS_NUMBER, k in LOCATIONS_START_NUMBER) x(i,j,k) is_binary

    ! INIZIALIZZAZIONE DEGLI ARRAY --------------------------------------------

	setrandseed(myseed)

	contatore := 1
  	forall (i in LOCATIONS_START_NUMBER) do
		LOCATIONS(i,1) := integer(round((point_max_range*random)))
		LOCATIONS(i,2) := integer(round((point_max_range*random)))
		LOCATIONS(i,3) := integer(round((depot_max_cost*random)+0.5))
	end-do

	forall (i in LOCATIONS_START_NUMBER) do
		LOCATIONS_START(i,1) := LOCATIONS(i,1)
		LOCATIONS_START(i,2) := LOCATIONS(i,2)
		LOCATIONS_START(i,3) := LOCATIONS(i,3)
	end-do

  	forall (i in LOCATIONS_END_NUMBER) do
  		LOCATIONS_END(i,1) := LOCATIONS(i-locations_number,1)
		LOCATIONS_END(i,2) := LOCATIONS(i-locations_number,2)
		LOCATIONS_END(i,3) := LOCATIONS(i-locations_number,3)
	end-do

	! Stampa array locazioni di start
  	write("\nLOCATIONS_START: [")
  	forall (i in LOCATIONS_START_NUMBER) do
  		write("[",LOCATIONS_START(i,1)," ",LOCATIONS_START(i,2)," ", LOCATIONS_START(i,3),"] ")
  	end-do
  	write("]")

	! Stampa array locazioni di end
  	write("\nLOCATIONS_END: [")
  	forall (i in LOCATIONS_END_NUMBER) do
  		write("[",LOCATIONS_END(i,1)," ",LOCATIONS_END(i,2)," ", LOCATIONS_END(i,3),"] ")
  	end-do
  	write("]")

	! Definizione array locazioni di start e di end
  	forall (i in LOCATIONS_START_NUMBER) do
  		LOCATIONS_START_END(i,1) := LOCATIONS_START(i,1)
  		LOCATIONS_START_END(i,2) := LOCATIONS_START(i,2)
  		LOCATIONS_START_END(i,3) := LOCATIONS_START(i,3)
  	end-do

  	forall (i in LOCATIONS_END_NUMBER) do
  		LOCATIONS_START_END(i,1) := LOCATIONS_END(i,1)
  		LOCATIONS_START_END(i,2) := LOCATIONS_END(i,2)
  		LOCATIONS_START_END(i,3) := LOCATIONS_END(i,3)
  	end-do

	! Definizione array dei clienti
  	forall (i in CUSTOMERS_NUMBER) do
		CUSTOMERS(i,1) := integer(round((point_max_range*random)))
		CUSTOMERS(i,2) := integer(round((point_max_range*random)))
		CUSTOMERS(i,3) := integer(round((customer_max_demand*random)+0.5))
  	end-do

	! Stampa array dei clienti
 	write("\nCUSTOMERS: [")
  	forall (i in CUSTOMERS_NUMBER) do
  		write("[",CUSTOMERS(i,1)," ",CUSTOMERS(i,2)," ", CUSTOMERS(i,3),"] ")
  	end-do
  	write("]")

	! Definizione array dei punti
	forall (i in LOCATIONS_START_NUMBER) do
		POINTS(i,1) := LOCATIONS(i,1)
		POINTS(i,2) := LOCATIONS(i,2)
		POINTS(i,3) := LOCATIONS(i,3)

		POINTS(i+locations_number,1) := LOCATIONS(i,1)
		POINTS(i+locations_number,2) := LOCATIONS(i,2)
		POINTS(i+locations_number,3) := LOCATIONS(i,3)
	end-do

	forall (i in CUSTOMERS_NUMBER) do
		POINTS(i,1) := CUSTOMERS(i,1)
		POINTS(i,2) := CUSTOMERS(i,2)
		POINTS(i,3) := CUSTOMERS(i,3)
	end-do

	! Stampa array dei clienti
 	write("\nPOINTS: [")
  	forall (i in POINTS_NUMBER) do
  		write("[",POINTS(i,1)," ",POINTS(i,2)," ", POINTS(i,3),"] ")
  	end-do
  	writeln("]")

	! Stampa e riempimento array delle distanze tra un punto e l'altro sul grafo
  	writeln('')
	forall (i in POINTS_NUMBER) do
		forall (j in POINTS_NUMBER) do
			if (i<=locations_number*2 and j<=locations_number*2) then
				DISTANCES(i,j) := 0.0
			else
				DISTANCES(i,j) := sqrt((POINTS(j,1)-POINTS(i,1))^2 + (POINTS(j,2)-POINTS(i,2))^2)
			end-if
			write(strfmt(DISTANCES(i,j), 2, 2), "\t")
		end-do
		write("\n")
	end-do



	! VINCOLI DEL MODELLO --------------------------------------------------------

	! Ogni cliente appartiene ad un solo magazzino (start)
	forall (i in CUSTOMERS_NUMBER)
		sum(j in LOCATIONS_START_NUMBER) customer_depot(i,j) = 1

	! La somma delle domande dei clienti appartenenti ad un magazzino è inferiore-uguale alla sua capacità
	forall (j in LOCATIONS_START_NUMBER)
		sum(i in CUSTOMERS_NUMBER) (CUSTOMERS(i,3) * customer_depot(i,j)) <= depots_capacity

    ! Se un magazzino è chiuso, allora nessun cliente più appartenere a quel magazzino
	forall (i in CUSTOMERS_NUMBER, j in LOCATIONS_START_NUMBER)
		 build_depot(j) >= customer_depot(i,j)

	! Non esistono archi sullo stesso nodo del grafo
	forall( i in POINTS_NUMBER) edge_exists(i,i) = 0

	! Per ogni nodo si ha solo un arco entrante ed uno uscente
	forall (i in POINTS_NUMBER) do
		sum(j in POINTS_NUMBER | i<>j) edge_exists(i,j) = 1
		sum(j in POINTS_NUMBER | i<>j) edge_exists(j,i) = 1
	end-do

	! Da un magazzino end deve partire un arco verso un magazzino start diverso da se stesso
	forall (i in LOCATIONS_END_NUMBER)
		sum(j in LOCATIONS_START_NUMBER | (i-locations_number)<>j) edge_exists(i,j) = 1

	! Da un magazzino start aperto deve partire un arco verso un cliente
	forall (i in LOCATIONS_START_NUMBER)
		sum(j in CUSTOMERS_NUMBER) edge_exists(i,j) = build_depot(i)

	! Ogni cliente che appartiene ad un magazzino aperto puo' avere un arco che dal magazzino (start) arriva a lui stesso
	forall (i in CUSTOMERS_NUMBER, j in LOCATIONS_START_NUMBER)
		edge_exists(j,i) <= customer_depot(i,j)

	! Ogni cliente che appartiene ad un magazzino aperto puo' avere un arco che da lui stesso arriva al magazzino (end)
	forall (i in CUSTOMERS_NUMBER, j in LOCATIONS_END_NUMBER)
		edge_exists(i,j) <= customer_depot(i,j)

	! Ogni magazzino end se costruito viene raggiunto solo da un cliente
	forall (j in LOCATIONS_END_NUMBER)
		sum(i in CUSTOMERS_NUMBER) edge_exists(i,j) = build_depot(j)

	! Se un magazzino di start e' aperto allora lo e' anche il suo end
	forall (i in LOCATIONS_START_NUMBER)
		build_depot(i+locations_number) = build_depot(i)

	! Ogni coppia di nodi e' connessa direttamente da un solo arco orientato
	forall (i in POINTS_NUMBER, j in POINTS_NUMBER | i<>j)
		(edge_exists(i,j) + edge_exists(j,i)) <= 1

	! Per ogni cliente non deve esistere un arco diretto verso un magazzino di start
	forall (i in CUSTOMERS_NUMBER)
		sum(j in LOCATIONS_START_NUMBER) edge_exists(i,j) = 0

	! Se un cliente appartiene a un magazzino di start, allora appartiene anche al magazzino end associato
	forall (j in LOCATIONS_START_NUMBER, i in CUSTOMERS_NUMBER)
		customer_depot(i,j) = customer_depot(i, j+locations_number)

	! Almeno un magazzino deve essere aperto se esistono dei clienti
	if (customers_number>0) then
		sum(i in LOCATIONS_START_NUMBER) build_depot(i) >=1
	end-if

	! la somma delle domande di tutti i clienti deve essere minore-uguale della capacità dei magazzini moltiplicata per il numero di possibili magazzini
	sum(i in CUSTOMERS_NUMBER) CUSTOMERS(i,3) <= sum(j in LOCATIONS_START_NUMBER) depots_capacity*build_depot(j)

	! -- Vincoli parametrizzati --

	! Vincolo appartenenza Cliente-Route V1
	if(clienteroutev1) then
		writeln("Vincolo Cliente-Route V1 Abilitato")
		forall(i in CUSTOMERS_NUMBER, j in LOCATIONS_START_NUMBER, k in CUSTOMERS_NUMBER) do
			customer_depot(i,j) >= customer_depot(k,j) + edge_exists(i,k)-1
			customer_depot(k,j) >= customer_depot(i,j) + edge_exists(i,k)-1
		end-do
	end-if


	! Vincolo appartenenza Cliente-Route V2
	if(clienteroutev2) then
		writeln("Vincolo Cliente-Route V2 Abilitato")
		forall(i in CUSTOMERS_NUMBER, j in CUSTOMERS_NUMBER, k in LOCATIONS_START_NUMBER) do
			x(i,j,k) <= customer_depot(i,k)
			x(i,j,k) <= customer_depot(j,k)
			x(i,j,k) <= build_depot(k)
		end-do

		forall(i in CUSTOMERS_NUMBER, j in CUSTOMERS_NUMBER)
			edge_exists(i,j) = sum(k in LOCATIONS_START_NUMBER) x(i,j,k)
	end-if

	! ----------------------------------------------------------------------------

	! Funzione obiettivo
  	Objective := sum(i in LOCATIONS_START_NUMBER) (LOCATIONS(i,3) * build_depot(i)) + sum(i in POINTS_NUMBER, j in POINTS_NUMBER) (DISTANCES(i,j) * edge_exists(i,j))

	nvincoli := 0
  	if(raffinamento_coppie) then
  		writeln("Raffinamento per coppie di clienti abilitato")
  		prosegui_cover := true
  		while(prosegui_cover) do
  			prosegui_cover := false
  			minimize(XPRS_LIN, Objective) ! Rilassamento continuo
  			forall(i in CUSTOMERS_NUMBER, j in CUSTOMERS_NUMBER, k in LOCATIONS_START_NUMBER | i>j) do
  				if(CUSTOMERS(i,3) + CUSTOMERS(j,3) > depots_capacity) then
  					if( (getsol(customer_depot(i,k))) + (getsol(customer_depot(j,k))) > 1 ) then
  						customer_depot(i,k) + customer_depot(j,k) <= 1
  						nvincoli += 1
  						prosegui_cover := true
  						writeln("raffinamento: generato vincolo. C", i, " domanda ",CUSTOMERS(i,3) , " C", j, " domanda ",CUSTOMERS(j,3), " magazzino ", k)
  					end-if
  				end-if
  			end-do
  		end-do
  		writeln("raffinamento: nuovi vincoli generati: ", nvincoli)
  	end-if


  	! plot

	minimize(Objective)
	writeln("\nObjective = ", getobjval, "\n")

	! plot

	! Azzera le visite su tutti i nodi del grafo
	reset_nodi_visitati

	! Per ogni magazzino start, se il magazzino è stato costruito allora fai una visita
	forall (i in LOCATIONS_START_NUMBER) do
		if (getsol(build_depot(i)) = 1) then
			visita(i)
			break
		end-if
	end-do

	iter := 0
	while(Connessi < points_number) do

		! Vincolo di CutSet
        sum(i in POINTS_NUMBER, j in POINTS_NUMBER | (nodi_visitati(i) + nodi_visitati(j) = 1)) edge_exists(i,j) >= 2

		iter := iter + 1
		minimize(Objective)
		writeln(iter, " Objective = ", getobjval, "\n")

		! stampa_matrici(false,false,false)
		! debug_magazzini_clienti
		! debug_archi

		! Azzera visita sui nodi del grafo
		reset_nodi_visitati

		forall (i in LOCATIONS_START_NUMBER) do
			if (getsol(build_depot(i))=1) then
				visita(i)
				break
			end-if
		end-do

		!plot
	end-do
	writeln("Iterazioni cutSet: ", iter)

	stampa_matrici(true,true,true)
	debug_magazzini_clienti
	debug_archi

	plot

	minimize(Objective)
	writeln("")
	writeln("Costo soluzione intera: ", getobjval)

	minimize(XPRS_LIN, Objective)
	writeln("Costo rilassamento continuo: ", getobjval)

	writeln("Seed della run: ", myseed)

	! FUNZIONI--------------------------------------------------------------------

	! Funzione che ritorna il numero di nodi del grafo visitati
	function Connessi:integer
		returned := sum(i in POINTS_NUMBER) nodi_visitati(i)
	end-function

	! PROCEDURE-------------------------------------------------------------------

	procedure debug_magazzini_clienti
		if (debug_su_file) then
			writeln("debug su file: " + debug_file_name)
			fopen(debug_file_name, F_APPEND)
		end-if

		writeln("")
		writeln("------------ Debug magazzini clienti ------------")
		writeln("magazzino_start -> {clienti} -> magazzino_end | domanda_accumulativa")
		forall (k in LOCATIONS_START_NUMBER | getsol(build_depot(k)) = 1) do
			cap := 0
			write(k, " -> { ")
			forall (j in CUSTOMERS_NUMBER | getsol(customer_depot(j,k)) = 1) do
				write(j, " ")
				cap := cap + CUSTOMERS(j,3)
			end-do
			writeln("} -> ", k+locations_number ," | ", cap)
			cap:=0
		end-do
		writeln("-------------------------------------------------")

		if (debug_su_file) then
			fclose(F_APPEND)
		end-if
	end-procedure

	procedure debug_archi
		if (debug_su_file) then
			writeln("debug su file: " + debug_file_name)
			fopen(debug_file_name, F_APPEND)
		end-if

		writeln("")
		writeln("------------------ Debug archi ------------------")
		writeln("nodo\t->\tnodo\t->\tnodo")
		writeln("-------------------------------------------------")
		forall (j in POINTS_NUMBER, i in POINTS_NUMBER, k in POINTS_NUMBER)
			if (getsol(edge_exists(i,j)) = 1 and getsol(edge_exists(j,k)) = 1) then
				writeln(i, "\t->\t", j, "\t->\t", k)
			end-if
		writeln("-------------------------------------------------")

		if (debug_su_file) then
			fclose(F_APPEND)
		end-if
	end-procedure

	! Procedura per la stampa delle matrici
	procedure stampa_matrici(print_build_depots:boolean, print_customer_depot:boolean, print_edge_exists:boolean)

		if (print_build_depots) then
			writeln("\nbuild_depot(i)")
			forall (i in LOCATIONS_START_NUMBER) do
				write(getsol(build_depot(i)))
				write(' ')
			end-do
			writeln('')
			forall (i in LOCATIONS_END_NUMBER) do
				write(getsol(build_depot(i)))
				write(' ')
			end-do
		end-if

		if (print_customer_depot) then
			writeln("\n\ncustomer_depot(i,j)")
			writeln('Next index: ', locations_number*2+1)
			forall (i in CUSTOMERS_NUMBER) do
				forall (j in LOCATIONS_START_END_NUMBER) do
					write(getsol(customer_depot(i,j)))
					write(' ')
				end-do
				writeln('')
			end-do
		end-if

		if (print_edge_exists) then
			writeln("\nedge_exists(i,j)")
			forall (i in POINTS_NUMBER) do
				forall (j in POINTS_NUMBER) do
					write(getsol(edge_exists(i,j)))
					write(' ')
				end-do
				writeln('')
			end-do
		end-if

	end-procedure

	! Procedura che azzera la visita dei nodi sul grafo
	procedure reset_nodi_visitati
		forall (i in POINTS_NUMBER)
			nodi_visitati(i) := 0
	end-procedure

	! Procedura di visita dei nodi del grafo
	procedure visita(n:integer)
		if (nodi_visitati(n)<>1) then ! Se il nodo dove siamo posizionati non è stato visitati...
			nodi_visitati(n) := 1 !...allora lo pongo come visitato.
			forall (m in POINTS_NUMBER | n<>m and round(getsol(edge_exists(n,m)))<>0) do ! Mi sposto al nodo successivo collegato dall'arco orientato
				visita(m) ! Visito il nodo in cui mi sono spostato
			end-do
		end-if
	end-procedure

	! Procedura per il disegno delle locazioni possibili dove costruire un magazzino
	procedure draw_locations
		svgaddgroup("depots_built", "Depots Built")
		svgaddgroup("depots_not_built", "Depots Not Built")
		svgaddgroup("depots_built_cost", "Depots Built Cost")
		svgaddgroup("depots_not_built_cost", "Depots Not Built Cost")
		svgaddgroup("locations_index", "Locations Index")

		forall (i in LOCATIONS_START_NUMBER) do
			if (getsol(build_depot(i)) = 1) then
				svgaddpoint("depots_built", LOCATIONS(i,1), LOCATIONS(i,2));
				svgsetstyle("depots_built", SVG_COLOR, SVG_RED)
			else
				svgaddpoint("depots_not_built", LOCATIONS(i,1), LOCATIONS(i,2));
				svgsetstyle("depots_not_built", SVG_COLOR, SVG_GRAY)
			end-if
		end-do

		forall (i in LOCATIONS_START_NUMBER) do
			if (getsol(build_depot(i)) = 1) then
				svgaddtext("depots_built_cost", LOCATIONS(i,1)+1, LOCATIONS(i,2)+1, strfmt(LOCATIONS(i,3),2));
				svgsetstyle("depots_built_cost", SVG_FONTSIZE, "3pt")
				svgsetstyle("depots_built_cost", SVG_FONTWEIGHT, "bold")
				svgsetstyle("depots_built_cost", SVG_COLOR, SVG_RED)
			else
				svgaddtext("depots_not_built_cost", LOCATIONS(i,1)+1, LOCATIONS(i,2)+1, strfmt(LOCATIONS(i,3),2));
				svgsetstyle("depots_not_built_cost", SVG_FONTSIZE, "3pt")
				svgsetstyle("depots_not_built_cost", SVG_FONTWEIGHT, "bold")
				svgsetstyle("depots_not_built_cost", SVG_COLOR, SVG_GRAY)
			end-if
		end-do

		forall (i in LOCATIONS_START_NUMBER) do
			multiple_index := strfmt(i,1) + "-" + strfmt(i+locations_number,1)
			svgaddtext("locations_index", LOCATIONS(i,1)+2, LOCATIONS(i,2)-2, strfmt(multiple_index,2));
			svgsetstyle("locations_index", SVG_FONTSIZE, "2pt")
			svgsetstyle("locations_index", SVG_COLOR, SVG_MAGENTA)
		end-do
	end-procedure

	! Procedura per il disegno dei clienti sul grafo
	procedure draw_customers
		svgaddgroup("customers_points", "Customers Points")
		svgaddgroup("customers_demand", "Customers Demand")
		svgaddgroup("customers_index", "Customers Index")

		forall (i in CUSTOMERS_NUMBER) do
			svgaddpoint("customers_points", CUSTOMERS(i,1), CUSTOMERS(i,2));
			svgsetstyle("customers_points", SVG_COLOR, SVG_LIME)
		end-do

		forall (i in CUSTOMERS_NUMBER) do
			svgaddtext("customers_demand", CUSTOMERS(i,1)+1, CUSTOMERS(i,2)+1, strfmt(CUSTOMERS(i,3),2));
			svgsetstyle("customers_demand", SVG_FONTSIZE, "3pt")
			svgsetstyle("customers_demand", SVG_FONTWEIGHT, "bold")
			svgsetstyle("customers_demand", SVG_COLOR, SVG_LIME)
		end-do

		forall (i in CUSTOMERS_NUMBER) do
			svgaddtext("customers_index", CUSTOMERS(i,1)+2, CUSTOMERS(i,2)-2, strfmt(i,2));
			svgsetstyle("customers_index", SVG_FONTSIZE, "2pt")
			svgsetstyle("customers_index", SVG_COLOR, SVG_MAGENTA)
		end-do
	end-procedure

	! Procedura per il disegno degli archi del grafo
	procedure draw_edges
		svgaddgroup("edges_customers", "Edges Customers", SVG_BLACK)
		svgaddgroup("edges_depots", "Edges Depots", SVG_WHITE)
		forall (i in POINTS_NUMBER, j in POINTS_NUMBER) do
			if (getsol(edge_exists(i,j))=1) then
				if (j<=(locations_number*2) and i<=(locations_number*2)) then
					svgsetstyle("edges_depots", SVG_STROKEWIDTH, "0.02rem")
				else
					svgaddarrow("edges_customers", POINTS(i,1), POINTS(i,2), POINTS(j,1), POINTS(j,2));
					svgsetstyle("edges_customers", SVG_STROKEWIDTH, "0.02rem")
				end-if
			end-if
		end-do
	end-procedure

	! Procedura generale per il disegno sul grafo
	procedure plot
		! Cancella il grafo
		svgerase

		! Plotta sul grafico le locazioni possibili dove costruire i magazzini, i clienti e gli archi
	  	draw_locations
	  	draw_customers
	  	draw_edges

		! Imposta margini del piano cartesiano
	  	svgsetgraphviewbox(-10, -10, point_max_range+20, point_max_range+20)

		! Aggiungi labels sugli assi del piano cartesiano
	  	svgsetgraphlabels("x", "y")

		! Se saved è true, allora salva il grafo come file
		if (saved) then
			filename := "run" + svgtimestamp + "_plot" + svgcounter + ".svg"
	  		svgcounter := svgcounter + 1
	  		svgsave(filename)
	  		svgrefresh
	  		!wait(1)
	  		!svgwaitclose
	  		!svgpause
	  	else
	  		svgrefresh
	  		!wait(1)
	  		!svgpause
	  	end-if

	end-procedure

end-model
