model Location_Routing_con_unico_ciclo_HAM
uses "mmxprs"; 
setparam("XPRS_VERBOSE", true)

declarations
	Q: integer
	clienti: integer
	locazioni: integer
	magazzini: integer
	punti: integer
	nClienti: 	range
	nLocazioni: range
	nPunti: range
end-declarations

Q:= 20
clienti:=5
locazioni:= 7
!magazzini:= 2*locazioni
punti := clienti+locazioni
nClienti := 1..clienti
nLocazioni := 1..locazioni
nLocazioniS := 1..locazioni
nLocazioniE := 1..locazioni
!nMagazzini:= 1..magazzini
nPunti := 1..punti

declarations
	COSTO_FISSO: array (nLocazioni) of integer
	!MAGAZZINI_START: array(nLocazioniS) of integer
	!MAGAZZINI_END: array(nLocazioniE) of integer
	!CLIENTI: array(nClienti) of integer
	DOMANDA_CLIENTI: array(nClienti) of integer
	!PUNTI: array(nPunti) of integer
	COSTO_DISTANZA: array(nPunti, nPunti) of integer
	x: array(nLocazioni) of mpvar
	y: array(nPunti, nPunti) of mpvar
	z: array(nClienti, nLocazioni) of mpvar
	Objective : linctr
end-declarations

!--------------inizializzazioni array--------------

forall(i in nLocazioni) do
	COSTO_FISSO(i) := ceil(real( strfmt(random*10,2,2)))
	!MAGAZZINI_START(i) := i
	!MAGAZZINI_END(i) := i
	!writeln(COSTO_FISSO(i), "\t", MAGAZZINI_START(i), "\t", MAGAZZINI_END(i))
end-do

forall(i in nClienti) do
	!CLIENTI(i) := i
	DOMANDA_CLIENTI(i) := ceil(real( strfmt(random*10,2,2)))
end-do

forall(i in nPunti, j in nPunti) do
	COSTO_DISTANZA(i,j) := ceil(real( strfmt(random*10,2,2)))
end-do

forall(i in nLocazioni) x(i) is_binary
forall(i in nPunti, j in nPunti) y(i,j) is_binary
forall(i in nClienti, j in nLocazioni) z(i,j) is_binary

!----------------Vincoli del modello--------------

forall(j in nLocazioni)
	sum(i in nClienti) DOMANDA_CLIENTI(i)*z(i,j) <= Q*x(j)
	
forall(i in nPunti)
	sum(j in nPunti) y(i,j) = 1
	
forall(j in nPunti) do
	sum(i in nPunti) y(i,j) = 1
	sum(i in nPunti) y(j,i) = 1
end-do
	
forall(i in nLocazioniE)
	sum(j in nLocazioniS) y(i,j) = 1
	
forall(i in nLocazioniS)
	sum(j in nClienti) y(i,j) = 1
	
forall(i in nClienti) 
	sum(j in nLocazioniS) y(i,j) = 1
	
forall(i in nLocazioniE)
	sum(j in nLocazioniS) x(j) = x(i)

!----------Funzione obiettivo------------
Objective := sum(i in nLocazioniS)COSTO_FISSO(i)*x(i) + sum(i in nPunti) sum(j in nPunti) COSTO_DISTANZA(i,j)*y(i,j)

minimize(Objective)
writeln(XPRS_LIN, getobjval)

end-model
